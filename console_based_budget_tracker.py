# -*- coding: utf-8 -*-
"""console-based-budget.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FTCVDOKYq8h2oKN8NNBxBpNWv2Hc4szm
"""

import json
import os
from datetime import datetime

# Loading transactions from a file is accomplished by the function
# Arg: transactions

def load_transactions():
    if os.path.exists('transactions.json'):
        with open('transactions.json', 'r') as file:
            return json.load(file)
    else:
        return {'income': [], 'expenses': []}

# Define the function save_transactions(transactions) to store transactions in a file
# Arg: transactions

def transactions_save(transactions):
    with open('transactions.json', 'w') as file:
        json.dump(transactions, file)

# income recording function
# Arg: transactions

def income_record(transactions):
    amount = float(input("Enter income amount: "))
    category = input("Enter income category: ")
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    transactions['income'].append({
        'amount': amount,
        'category': category,
        'date': date
    })
    transactions_save(transactions)
    print("Income recorded successfully.")

# Function to record expenses of the transactions
# Arg: transactions

def expense_record(transactions):
    amount = float(input("Enter expense amount: "))
    category = input("Enter expense category: ")
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    transactions['expenses'].append({
        'amount': amount,
        'category': category,
        'date': date
    })
    transactions_save(transactions)
    print("Expense recorded successfully.")

# Function to calculate remaining budget
# Arg: transactions

def budget_calculate(transactions):
    total_income = sum(transaction['amount'] for transaction in transactions['income'])
    total_expenses = sum(transaction['amount'] for transaction in transactions['expenses'])
    remaining_budget = total_income - total_expenses
    print(f"Total Income: ${total_income}")
    print(f"Total Expenses: ${total_expenses}")
    print(f"Remaining Budget: ${remaining_budget}")

# Function to analyze expenses by category
# Arg. transactions

def expenses_analyze(transactions):
    expense_categories = {}
    for expense in transactions['expenses']:
        category = expense['category']
        amount = expense['amount']
        if category in expense_categories:
            expense_categories[category] += amount
        else:
            expense_categories[category] = amount
    print("\nExpense Analysis:")
    for category, amount in expense_categories.items():
        print(f"{category}: ${amount}")

# Main function

def main():
    transactions = load_transactions()

    while True:
        print("\n*****BUDGET TRACKER*****\n1. Record Income\n2. Record Expense\n3. Calculate Budget\n4. Expense Analysis\n5. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            income_record(transactions)
        elif choice == '2':
            expense_record(transactions)
        elif choice == '3':
            budget_calculate(transactions)
        elif choice == '4':
            expenses_analyze(transactions)
        elif choice == '5':
            print("Exiting...")
            break
        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main()

